version: '3.5'
services:
  idp:
    image: jacksonbarreto/idp-automations-hub:latest
    container_name: idp
    hostname: idp
    restart: always
    depends_on:
      - postgres
      - redis
      - kafka1
    env_file:
      - .env-idp
    ports:
      - "${WEB_SERVER_PORT}:${WEB_SERVER_PORT}"
    networks:
      - idp_network
      - service-hub

  postgres:
    image: postgres:alpine
    container_name: postgres
    restart: always
    hostname: ${DB_HOST}
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      PGPORT: ${DB_PORT}
      DB_HOST: ${DB_HOST}
    volumes:
      - ./db_data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "${DB_PORT}:${DB_PORT}"
    networks:
      - idp_network

  redis:
    image: redis:alpine
    container_name: redis_idp
    command: --port ${REDIS_PORT}
    env_file:
      - .env
    hostname: ${REDIS_HOST}
    restart: always
    ports:
      - "${REDIS_PORT}:${REDIS_PORT}"
    volumes:
      - redis_data:/data
    networks:
      - idp_network
    sysctls:
      - net.core.somaxconn=511

  nginx:
    image: nginx:alpine
    container_name: gateway
    restart: always
    depends_on:
      - frontend
      - idp
    ports:
      - "80:80"
    volumes:
      - ./nginx-config:/etc/nginx
    networks:
      - service-hub

  nginxconfigmanager:
    image: jacksonbarreto/automation-hub-nginxconfigmanager:latest
    restart: always
    env_file:
      - .env-gateway
    volumes:
      - ./nginx-config/sites-enabled:/app/sites-enabled
    networks:
      - service-hub

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    restart: always
    environment:
      ZOOKEEPER_CLIENT_PORT: ${ZOOKEEPER_PORT}
    networks:
      - net_kafka

  kafka1:
    image: confluentinc/cp-kafka:latest
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_LISTENERS: INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://${BROKER_1_ADDRESS}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
      - net_kafka
      - service-hub

  kafka2:
    image: confluentinc/cp-kafka:latest
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9093:9092"
    environment:
      KAFKA_BROKER_ID: 2
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_LISTENERS: INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://${BROKER_2_ADDRESS}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
      - net_kafka
      - service-hub

  kafka3:
    image: confluentinc/cp-kafka:latest
    restart: always
    depends_on:
      - zookeeper
    ports:
      - "9094:9092"
    environment:
      KAFKA_BROKER_ID: 3
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:${ZOOKEEPER_PORT}
      KAFKA_LISTENERS: INTERNAL://:9092
      KAFKA_ADVERTISED_LISTENERS: INTERNAL://${BROKER_3_ADDRESS}:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INTERNAL:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INTERNAL
    networks:
      - net_kafka
      - service-hub

  control-center:
    image: confluentinc/cp-enterprise-control-center:latest
    restart: always
    hostname: control-center
    depends_on:
      - kafka1
      - kafka2
      - kafka3
    ports:
      - "9021:9021"
    environment:
      CONTROL_CENTER_BOOTSTRAP_SERVERS: 'kafka1:9092,kafka2:9093,kafka3:9094'
      CONTROL_CENTER_REPLICATION_FACTOR: 1
      CONTROL_CENTER_CONNECT_CLUSTER: http://kafka-connect:8083
      PORT: 9021
    networks:
      - net_kafka

  frontend:
    image: jacksonbarreto/automation-hub-frontend:latest
    container_name: frontend
    hostname: frontend
    restart: always
    depends_on:
      - backend
    networks:
      - service-hub
      - automation_hub_network

  backend:
    container_name: backend
    image: jacksonbarreto/automation-hub-backend:latest
    hostname: backend
    restart: always
    env_file:
      - .env-backend
    depends_on:
      - postgres
      - idp
    ports:
      - "${BACKEND_PORT}:${BACKEND_PORT}"
    volumes:
      - ./uploads:/app/uploads
    networks:
      - service-hub
      - automation_hub_network

  generic-auto:
    build:
      context: ./generic-auto
      dockerfile: Dockerfile
    container_name: generic-auto
    networks:
      - service-hub


volumes:
  db_data:
  redis_data:
  nginx-config:

networks:
  idp_network:
    name: idp_network
    driver: bridge
  net_kafka:
    name: net_kafka
    driver: bridge
  gate_network:
    name: gate_network
    driver: bridge
  automation_hub_network:
    name: automation_hub_network
    driver: bridge
  service-hub:
    name: service-hub
    driver: bridge
